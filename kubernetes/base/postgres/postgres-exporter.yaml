apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-exporter-queries
  namespace: services
  labels:
    app: postgres-exporter
data:
  queries.yaml: |
    pg_database:
      query: "SELECT pg_database.datname, pg_database_size(pg_database.datname) as size FROM pg_database"
      master: true
      metrics:
        - datname:
            usage: "LABEL"
            description: "Name of the database"
        - size:
            usage: "GAUGE"
            description: "Disk space used by the database"

    pg_stat_activity:
      query: |
        SELECT
          pg_database.datname,
          tmp.state,
          COALESCE(count,0) as count,
          COALESCE(max_tx_duration,0) as max_tx_duration
        FROM
          (
            VALUES ('active'),
                   ('idle'),
                   ('idle in transaction'),
                   ('idle in transaction (aborted)'),
                   ('fastpath function call'),
                   ('disabled')
          ) AS tmp(state) CROSS JOIN pg_database
        LEFT JOIN
          (
            SELECT
              datname,
              state,
              count(*) AS count,
              MAX(EXTRACT(EPOCH FROM now() - xact_start))::float AS max_tx_duration
            FROM pg_stat_activity GROUP BY datname, state
          ) AS tmp2 ON tmp.state = tmp2.state AND pg_database.datname = tmp2.datname
      master: true
      metrics:
        - datname:
            usage: "LABEL"
            description: "Name of the database"
        - state:
            usage: "LABEL"
            description: "State of the connection"
        - count:
            usage: "GAUGE"
            description: "Number of connections in this state"
        - max_tx_duration:
            usage: "GAUGE"
            description: "Max duration in seconds any active transaction has been running"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres-exporter
  namespace: services
  labels:
    app: postgres-exporter
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres-exporter
  template:
    metadata:
      labels:
        app: postgres-exporter
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9187"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: postgres-exporter
        image: prometheuscommunity/postgres-exporter:v0.15.0
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 9187
          name: metrics
        env:
        # Build DATA_SOURCE_NAME from individual components for flexibility
        # Format: postgresql://username:password@hostname:port/database?sslmode=disable
        - name: POSTGRES_USER
          valueFrom:
            configMapKeyRef:
              name: postgres-config
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_PASSWORD
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              name: postgres-config
              key: POSTGRES_DB
        # For managed PostgreSQL, you can override these via ConfigMap
        - name: POSTGRES_HOST
          value: "postgres.services.svc.cluster.local"
        - name: POSTGRES_PORT
          value: "5432"
        # Construct the DATA_SOURCE_NAME
        - name: DATA_SOURCE_NAME
          value: "postgresql://$(POSTGRES_USER):$(POSTGRES_PASSWORD)@$(POSTGRES_HOST):$(POSTGRES_PORT)/$(POSTGRES_DB)?sslmode=disable"
        # Custom queries file
        - name: PG_EXPORTER_EXTEND_QUERY_PATH
          value: "/etc/postgres-exporter/queries.yaml"
        # Disable default metrics that might not work with managed databases
        - name: PG_EXPORTER_DISABLE_DEFAULT_METRICS
          value: "false"
        - name: PG_EXPORTER_DISABLE_SETTINGS_METRICS
          value: "false"
        volumeMounts:
        - name: queries
          mountPath: /etc/postgres-exporter
          readOnly: true
        resources:
          requests:
            cpu: 50m
            memory: 64Mi
          limits:
            cpu: 200m
            memory: 128Mi
        livenessProbe:
          httpGet:
            path: /
            port: 9187
          initialDelaySeconds: 30
          periodSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /
            port: 9187
          initialDelaySeconds: 5
          periodSeconds: 5
          failureThreshold: 3
      volumes:
      - name: queries
        configMap:
          name: postgres-exporter-queries
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-exporter
  namespace: services
  labels:
    app: postgres-exporter
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9187"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  selector:
    app: postgres-exporter
  ports:
  - name: metrics
    port: 9187
    targetPort: 9187
