---
# User Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: user-service
  namespace: services
  labels:
    app: user-service
    version: v1
    app.kubernetes.io/name: user-service
    app.kubernetes.io/version: v1
spec:
  replicas: 2
  selector:
    matchLabels:
      app: user-service
  template:
    metadata:
      labels:
        app: user-service
        version: v1
        app.kubernetes.io/name: user-service
        app.kubernetes.io/version: v1
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: user-service
        image: mock-service:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8080
        env:
        - name: SERVICE_NAME
          value: "user-service"
        - name: SERVICE_PORT
          value: "8080"
        - name: OTEL_EXPORTER_OTLP_ENDPOINT
          value: "otel-collector.monitoring.svc.cluster.local:4317"
        - name: DOWNSTREAM_SERVICES
          value: ""
        resources:
          requests:
            cpu: 50m
            memory: 64Mi
          limits:
            cpu: 100m
            memory: 128Mi
---
apiVersion: v1
kind: Service
metadata:
  name: user-service
  namespace: services
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8080"
spec:
  selector:
    app: user-service
  ports:
  - port: 80
    targetPort: 8080
---
# Product Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: product-service
  namespace: services
  labels:
    app: product-service
    version: v1
    app.kubernetes.io/name: product-service
    app.kubernetes.io/version: v1
spec:
  replicas: 2
  selector:
    matchLabels:
      app: product-service
  template:
    metadata:
      labels:
        app: product-service
        version: v1
        app.kubernetes.io/name: product-service
        app.kubernetes.io/version: v1
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: product-service
        image: mock-service:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8080
        env:
        - name: SERVICE_NAME
          value: "product-service"
        - name: SERVICE_PORT
          value: "8080"
        - name: OTEL_EXPORTER_OTLP_ENDPOINT
          value: "otel-collector.monitoring.svc.cluster.local:4317"
        - name: DOWNSTREAM_SERVICES
          value: "inventory-service"
        resources:
          requests:
            cpu: 50m
            memory: 64Mi
          limits:
            cpu: 100m
            memory: 128Mi
---
apiVersion: v1
kind: Service
metadata:
  name: product-service
  namespace: services
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8080"
spec:
  selector:
    app: product-service
  ports:
  - port: 80
    targetPort: 8080
---
# Inventory Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: inventory-service
  namespace: services
  labels:
    app: inventory-service
    version: v1
    app.kubernetes.io/name: inventory-service
    app.kubernetes.io/version: v1
spec:
  replicas: 2
  selector:
    matchLabels:
      app: inventory-service
  template:
    metadata:
      labels:
        app: inventory-service
        version: v1
        app.kubernetes.io/name: inventory-service
        app.kubernetes.io/version: v1
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: inventory-service
        image: mock-service:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8080
        env:
        - name: SERVICE_NAME
          value: "inventory-service"
        - name: SERVICE_PORT
          value: "8080"
        - name: OTEL_EXPORTER_OTLP_ENDPOINT
          value: "otel-collector.monitoring.svc.cluster.local:4317"
        - name: DOWNSTREAM_SERVICES
          value: ""
        resources:
          requests:
            cpu: 50m
            memory: 64Mi
          limits:
            cpu: 100m
            memory: 128Mi
---
apiVersion: v1
kind: Service
metadata:
  name: inventory-service
  namespace: services
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8080"
spec:
  selector:
    app: inventory-service
  ports:
  - port: 80
    targetPort: 8080
---
# Order Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: order-service
  namespace: services
  labels:
    app: order-service
    version: v1
    app.kubernetes.io/name: order-service
    app.kubernetes.io/version: v1
spec:
  replicas: 2
  selector:
    matchLabels:
      app: order-service
  template:
    metadata:
      labels:
        app: order-service
        version: v1
        app.kubernetes.io/name: order-service
        app.kubernetes.io/version: v1
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: order-service
        image: mock-service:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8080
        env:
        - name: SERVICE_NAME
          value: "order-service"
        - name: SERVICE_PORT
          value: "8080"
        - name: OTEL_EXPORTER_OTLP_ENDPOINT
          value: "otel-collector.monitoring.svc.cluster.local:4317"
        - name: DOWNSTREAM_SERVICES
          value: "user-service,product-service,payment-service"
        resources:
          requests:
            cpu: 50m
            memory: 64Mi
          limits:
            cpu: 100m
            memory: 128Mi
---
apiVersion: v1
kind: Service
metadata:
  name: order-service
  namespace: services
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8080"
spec:
  selector:
    app: order-service
  ports:
  - port: 80
    targetPort: 8080
---
# Payment Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: payment-service
  namespace: services
  labels:
    app: payment-service
    version: v1
    app.kubernetes.io/name: payment-service
    app.kubernetes.io/version: v1
spec:
  replicas: 2
  selector:
    matchLabels:
      app: payment-service
  template:
    metadata:
      labels:
        app: payment-service
        version: v1
        app.kubernetes.io/name: payment-service
        app.kubernetes.io/version: v1
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: payment-service
        image: mock-service:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8080
        env:
        - name: SERVICE_NAME
          value: "payment-service"
        - name: SERVICE_PORT
          value: "8080"
        - name: OTEL_EXPORTER_OTLP_ENDPOINT
          value: "otel-collector.monitoring.svc.cluster.local:4317"
        - name: DOWNSTREAM_SERVICES
          value: "notification-service"
        resources:
          requests:
            cpu: 50m
            memory: 64Mi
          limits:
            cpu: 100m
            memory: 128Mi
---
apiVersion: v1
kind: Service
metadata:
  name: payment-service
  namespace: services
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8080"
spec:
  selector:
    app: payment-service
  ports:
  - port: 80
    targetPort: 8080
---
# Notification Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: notification-service
  namespace: services
  labels:
    app: notification-service
    version: v1
    app.kubernetes.io/name: notification-service
    app.kubernetes.io/version: v1
spec:
  replicas: 1
  selector:
    matchLabels:
      app: notification-service
  template:
    metadata:
      labels:
        app: notification-service
        version: v1
        app.kubernetes.io/name: notification-service
        app.kubernetes.io/version: v1
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: notification-service
        image: mock-service:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8080
        env:
        - name: SERVICE_NAME
          value: "notification-service"
        - name: SERVICE_PORT
          value: "8080"
        - name: OTEL_EXPORTER_OTLP_ENDPOINT
          value: "otel-collector.monitoring.svc.cluster.local:4317"
        - name: DOWNSTREAM_SERVICES
          value: ""
        resources:
          requests:
            cpu: 50m
            memory: 64Mi
          limits:
            cpu: 100m
            memory: 128Mi
---
apiVersion: v1
kind: Service
metadata:
  name: notification-service
  namespace: services
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8080"
spec:
  selector:
    app: notification-service
  ports:
  - port: 80
    targetPort: 8080
---
# Gateway Service (entry point)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gateway-service
  namespace: services
  labels:
    app: gateway-service
    version: v1
    app.kubernetes.io/name: gateway-service
    app.kubernetes.io/version: v1
spec:
  replicas: 2
  selector:
    matchLabels:
      app: gateway-service
  template:
    metadata:
      labels:
        app: gateway-service
        version: v1
        app.kubernetes.io/name: gateway-service
        app.kubernetes.io/version: v1
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: gateway-service
        image: mock-service:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8080
        env:
        - name: SERVICE_NAME
          value: "gateway-service"
        - name: SERVICE_PORT
          value: "8080"
        - name: OTEL_EXPORTER_OTLP_ENDPOINT
          value: "otel-collector.monitoring.svc.cluster.local:4317"
        - name: DOWNSTREAM_SERVICES
          value: "order-service,user-service,product-service"
        resources:
          requests:
            cpu: 50m
            memory: 64Mi
          limits:
            cpu: 100m
            memory: 128Mi
---
apiVersion: v1
kind: Service
metadata:
  name: gateway-service
  namespace: services
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8080"
spec:
  type: NodePort
  selector:
    app: gateway-service
  ports:
  - port: 80
    targetPort: 8080
    nodePort: 30080
    name: http
